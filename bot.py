"""
Telegram –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
"""
import asyncio
import logging
from functools import lru_cache
from typing import Dict, Any, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

import os
from config import MESSAGES

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config.py
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    try:
        from config import BOT_TOKEN
    except ImportError:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
# BOT_ID –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ main()
BOT_ID = None

from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–±–æ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


class ProfileStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    waiting_for_name = State()
    waiting_for_branch = State()
    waiting_for_job_title = State()
    waiting_for_about = State()
    waiting_for_photo = State()


class SearchStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    viewing_profile = State()
    waiting_for_search_query = State()
    waiting_for_keywords = State()


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
current_viewing = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
viewed_users = {}

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_cache = {}  # {telegram_id: user_data}
cache_ttl = 300  # 5 –º–∏–Ω—É—Ç

# –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_cache.clear()

def get_cached_user(telegram_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
    return user_cache.get(telegram_id)

def set_cached_user(telegram_id: int, user_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à"""
    user_cache[telegram_id] = user_data

def clear_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
    user_cache.clear()


@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await cancel_profile_creation(message, state)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(message.from_user.id)
    
    if user:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        await message.answer(
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–æ—Ä–º—É–ª—É –º–æ–ª–æ–¥–µ–∂–∏!**\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ñ–æ—Ä—É–º–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n\n"
            "**üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π:**\n"
            "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n"
            "**üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:**\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
        await message.answer(
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–æ—Ä–º—É–ª—É –º–æ–ª–æ–¥–µ–∂–∏!**\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
            ])
        )


@dp.callback_query(F.data == "create_profile")
async def start_profile_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.message.edit_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –Ω–∞ —Ñ–æ—Ä—É–º–µ!\n\n"
        "**–®–∞–≥ 1/5:** –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
    )
    await callback.answer()
    await state.set_state(ProfileStates.waiting_for_name)

@dp.message(StateFilter(ProfileStates.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(name=name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    data = await state.get_data()
    is_edit = data.get('is_edit', False)
    
    if is_edit:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        await state.update_data(name=message.text)
        await message.answer(
            "‚úÖ **–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            "**–®–∞–≥ 2/5:** –í –∫–∞–∫–æ–º —Ñ–∏–ª–∏–∞–ª–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
        )
        await state.set_state(ProfileStates.waiting_for_branch)


@dp.message(StateFilter(ProfileStates.waiting_for_branch))
async def process_branch(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∏–ª–∏–∞–ª–∞"""
    branch = message.text.strip()
    if len(branch) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(branch=branch)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    data = await state.get_data()
    is_edit = data.get('is_edit', False)
    
    if is_edit:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        await state.update_data(branch=message.text)
        await message.answer(
            "‚úÖ **–§–∏–ª–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            "**–®–∞–≥ 3/5:** –ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
        )
        await state.set_state(ProfileStates.waiting_for_job_title)


@dp.message(StateFilter(ProfileStates.waiting_for_job_title))
async def process_job_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    job_title = message.text.strip()
    if len(job_title) < 2:
        await message.answer("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(job_title=job_title)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    data = await state.get_data()
    is_edit = data.get('is_edit', False)
    
    if is_edit:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        await state.update_data(job_title=message.text)
        await message.answer(
            "‚úÖ **–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            "**–®–∞–≥ 4/5:** –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ü–µ–ª—è—Ö:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
        )
        await state.set_state(ProfileStates.waiting_for_about)


@dp.message(StateFilter(ProfileStates.waiting_for_about))
async def process_about(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"""
    about = message.text.strip()
    if len(about) < 10:
        await message.answer("‚ùå –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(about=about)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    data = await state.get_data()
    is_edit = data.get('is_edit', False)
    
    if is_edit:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        await state.update_data(about=message.text)
        await message.answer(
            "‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∞–Ω–∫–µ—Ç–µ?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
                [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
        )
        await state.set_state(ProfileStates.waiting_for_photo)
    else:
        # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
            [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        
        await message.answer(
            "‚úÖ **–ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
            "**–®–∞–≥ 5/5:** –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∞–Ω–∫–µ—Ç–µ?",
            reply_markup=keyboard
        )
        await state.set_state(ProfileStates.waiting_for_photo)


@dp.callback_query(F.data == "add_photo")
async def process_add_photo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    await callback.message.edit_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:")
    await state.set_state(ProfileStates.waiting_for_photo)


@dp.callback_query(F.data == "skip_photo")
async def process_skip_photo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    data = await state.get_data()
    is_edit = data.get('is_edit', False)
    
    await save_profile(callback.message, state, photo_file_id=None, is_edit=is_edit, remove_photo=True)
    await callback.answer()


@dp.message(StateFilter(ProfileStates.waiting_for_photo), F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    photo_file_id = message.photo[-1].file_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    data = await state.get_data()
    is_edit = data.get('is_edit', False)
    
    await save_profile(message, state, photo_file_id, is_edit=is_edit)


@dp.message(StateFilter(ProfileStates.waiting_for_photo))
async def process_photo_invalid(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")


async def save_profile(message: types.Message, state: FSMContext, photo_file_id: str = None, is_edit: bool = False, remove_photo: bool = False):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"üíæ save_profile: photo_file_id = {photo_file_id}")
    logger.info(f"üíæ is_edit = {is_edit}")
    logger.info(f"üíæ data keys: {list(data.keys())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['name', 'branch', 'job_title', 'about']
    missing_fields = [field for field in required_fields if field not in data or not data[field]]
    
    if missing_fields:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞:** –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!\n\n"
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_fields)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return
    
    if is_edit:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º final_photo_file_id
        if remove_photo:
            # –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
            final_photo_file_id = None
        elif photo_file_id is not None:
            # –ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
            final_photo_file_id = photo_file_id
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–∑ FSM
            final_photo_file_id = data.get('photo_file_id')
        
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: final_photo_file_id = {final_photo_file_id}")
        logger.info(f"üîÑ photo_file_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ = {photo_file_id}")
        logger.info(f"üîÑ photo_file_id –∏–∑ FSM = {data.get('photo_file_id')}")
        logger.info(f"üîÑ remove_photo = {remove_photo}")
        
        success = await db.update_user(
            telegram_id=message.from_user.id,
            name=data['name'],
            branch=data['branch'],
            job_title=data['job_title'],
            about=data['about'],
            photo_file_id=final_photo_file_id,
            update_photo=True
        )
        
        logger.info(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: success = {success}")
        
        if success:
            await state.clear()
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            updated_user_data = await db.get_user(message.from_user.id)
            if updated_user_data:
                await message.answer(
                    "‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                    "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                    reply_markup=get_main_menu_keyboard()
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è
                await show_profile_card(message, updated_user_data, is_own_profile=True)
            else:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        success = await db.add_user(
            telegram_id=message.from_user.id,
            name=data['name'],
            branch=data['branch'],
            job_title=data['job_title'],
            about=data['about'],
            photo_file_id=photo_file_id
        )
        
        if success:
            await state.clear()
            await message.answer(
                "üéâ **–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ñ–æ—Ä—É–º–∞.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        # –ì—Ä—É–ø–ø–∞ –ø–æ–∏—Å–∫–∞ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", callback_data="search_by_keywords")],
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        [InlineKeyboardButton(text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="separator")],
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ", callback_data="viewed_list")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        [InlineKeyboardButton(text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="separator")],
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="reset_profile")]
    ])
    return keyboard


async def check_profile_exists(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(user_id)
    return user is not None

async def cancel_profile_creation(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    await state.clear()
    await message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="main_menu")]
        ])
    )

async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())


@dp.callback_query(F.data == "search")
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_profile_exists(user_id):
        await callback.message.edit_text(
            "‚ùå **–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!**\n\n"
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
            ])
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users_count = await db.get_users_count()
    if users_count < 2:
        await callback.message.edit_text(
            "üòî **–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_viewed = viewed_users.get(user_id, [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    random_user = await db.get_random_user(user_id, user_viewed)
    if not random_user:
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        viewed_users[user_id] = []
        await callback.message.edit_text(
            "üéâ **–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!**\n\n"
            "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    viewed_users[user_id] = user_viewed + [random_user['telegram_id']]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_viewing[user_id] = random_user
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    await show_profile_card(callback.message, random_user)
    await callback.answer()


def get_profile_card_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ù –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="like")],
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="next")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


def format_profile_card(user_data: dict):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    card = f"üë§ **{user_data['name']}**\n\n"
    
    if user_data.get('branch'):
        card += f"üè¢ **–§–∏–ª–∏–∞–ª:** {user_data['branch']}\n"
    
    if user_data.get('job_title'):
        card += f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {user_data['job_title']}\n"
    
    if user_data.get('about'):
        card += f"üìù **–û —Å–µ–±–µ:** {user_data['about']}\n"
    
    card += "\n" + "‚îÄ" * 30 + "\n"
    card += "üí° –ù–∞–∂–º–∏—Ç–µ 'ü§ù –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è' –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"
    
    return card

def format_contact_info(user_data: dict, telegram_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
    text = f"üë§ **{user_data['name']}**\n"
    text += f"üè¢ **–§–∏–ª–∏–∞–ª:** {user_data['branch']}\n"
    text += f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {user_data['job_title']}\n"
    text += f"üÜî **ID –¥–ª—è —Å–≤—è–∑–∏:** `{telegram_id}`\n"
    
    if user_data.get('about'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è
        about = user_data['about'][:100]
        if len(user_data['about']) > 100:
            about += "..."
        text += f"üìù **–û —Å–µ–±–µ:** {about}\n"
    
    return text

def get_contact_keyboard(telegram_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID —Ä–µ–∞–ª—å–Ω—ã–º Telegram ID (–æ–±—ã—á–Ω–æ –±–æ–ª—å—à–µ 100000000)
    # –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–º ID
    if telegram_id > 100000000 and telegram_id not in [123456789, 4001, 5001, 6001, 7001, 8001]:
        try:
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={telegram_id}")],
                [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –µ—â–µ", callback_data="search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
            pass
    
    # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö ID –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –µ—â–µ", callback_data="search")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_response_keyboard(from_user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ù –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data=f"respond_like_{from_user_id}")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_like_{from_user_id}")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

async def show_profile_card(message: types.Message, user_data: dict, is_own_profile: bool = False):
    """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    text = format_profile_card(user_data)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"üîç show_profile_card: photo_file_id = {user_data.get('photo_file_id')}")
    logger.info(f"üîç user_data keys: {list(user_data.keys())}")
    logger.info(f"üîç is_own_profile = {is_own_profile}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á–µ–π —ç—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å
    if is_own_profile:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        keyboard = get_profile_card_keyboard()
    
    if user_data.get('photo_file_id'):
        logger.info("üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é")
        await message.answer_photo(
            photo=user_data['photo_file_id'],
            caption=text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        logger.info("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        await message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )

async def edit_profile_card(callback: CallbackQuery, user_data: dict):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    text = format_profile_card(user_data)
    
    if user_data.get('photo_file_id'):
        try:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=user_data['photo_file_id'],
                    caption=text,
                    parse_mode="Markdown"
                ),
                reply_markup=get_profile_card_keyboard()
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer_photo(
                photo=user_data['photo_file_id'],
                caption=text,
                parse_mode="Markdown",
                reply_markup=get_profile_card_keyboard()
            )
    else:
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_profile_card_keyboard()
        )


@dp.callback_query(F.data == "like")
async def process_like(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞"""
    user_id = callback.from_user.id
    viewed_user = current_viewing.get(user_id)
    
    if not viewed_user:
        await callback.message.edit_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        await callback.answer()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É
    await db.add_like(user_id, viewed_user['telegram_id'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
    is_match = await db.check_match(user_id, viewed_user['telegram_id'])
    
    if is_match:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        contact_info = await db.get_user_contact_info(viewed_user['telegram_id'])
        
        try:
            await callback.message.edit_text(
                f"üéâ **–í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!**\n\n"
                f"–í—ã –∏ {viewed_user['name']} —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
                f"üí¨ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n"
                f"{format_contact_info(contact_info, viewed_user['telegram_id'])}\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –æ–±—â–∞—Ç—å—Å—è!",
                reply_markup=get_contact_keyboard(viewed_user['telegram_id'])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer(
                f"üéâ **–í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!**\n\n"
                f"–í—ã –∏ {viewed_user['name']} —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
                f"üí¨ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n"
                f"{format_contact_info(contact_info, viewed_user['telegram_id'])}\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –æ–±—â–∞—Ç—å—Å—è!",
                reply_markup=get_contact_keyboard(viewed_user['telegram_id'])
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–∑–∞–∏–º–Ω–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ
        other_contact_info = await db.get_user_contact_info(user_id)
        try:
            await bot.send_message(
                viewed_user['telegram_id'],
                f"üéâ **–í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!**\n\n"
                f"–í—ã –∏ {other_contact_info['name']} —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
                f"üí¨ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n"
                f"{format_contact_info(other_contact_info, user_id)}\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –æ–±—â–∞—Ç—å—Å—è!",
                reply_markup=get_contact_keyboard(user_id)
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ
        try:
            await send_like_notification_with_buttons(viewed_user['telegram_id'], user_id)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {viewed_user['telegram_id']}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ: {e}")
        
        try:
            await callback.message.edit_text(
                f"‚úÖ **–ò–Ω—Ç–µ—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
                f"–í—ã –≤—ã—Ä–∞–∑–∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å {viewed_user['name']}!\n\n"
                f"–ï—Å–ª–∏ {viewed_user['name']} —Ç–æ–∂–µ –∑–∞—Ö–æ—á–µ—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –µ—â–µ", callback_data="search")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer(
                f"‚úÖ **–ò–Ω—Ç–µ—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
                f"–í—ã –≤—ã—Ä–∞–∑–∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å {viewed_user['name']}!\n\n"
                f"–ï—Å–ª–∏ {viewed_user['name']} —Ç–æ–∂–µ –∑–∞—Ö–æ—á–µ—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –µ—â–µ", callback_data="search")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    if user_id not in viewed_users:
        viewed_users[user_id] = []
    if viewed_user['telegram_id'] not in viewed_users[user_id]:
        viewed_users[user_id].append(viewed_user['telegram_id'])
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ: {viewed_user['name']} (ID: {viewed_user['telegram_id']})")
    else:
        logger.info(f"–£–∂–µ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö: {viewed_user['name']} (ID: {viewed_user['telegram_id']})")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if user_id in current_viewing:
        del current_viewing[user_id]
    
    await callback.answer()


@dp.callback_query(F.data == "next")
async def process_next(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—å—à–µ'"""
    user_id = callback.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    if user_id in current_viewing:
        viewed_user = current_viewing[user_id]
        if user_id not in viewed_users:
            viewed_users[user_id] = []
        if viewed_user['telegram_id'] not in viewed_users[user_id]:
            viewed_users[user_id].append(viewed_user['telegram_id'])
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ (–î–∞–ª—å—à–µ): {viewed_user['name']} (ID: {viewed_user['telegram_id']})")
        else:
            logger.info(f"–£–∂–µ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö (–î–∞–ª—å—à–µ): {viewed_user['name']} (ID: {viewed_user['telegram_id']})")
        del current_viewing[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_viewed = viewed_users.get(user_id, [])
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    random_user = await db.get_random_user(user_id, user_viewed)
    if not random_user:
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        viewed_users[user_id] = []
        await callback.message.edit_text(
            "üéâ **–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!**\n\n"
            "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    viewed_users[user_id] = user_viewed + [random_user['telegram_id']]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_viewing[user_id] = random_user
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    await show_profile_card(callback.message, random_user)
    await callback.answer()


@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    if user_id in current_viewing:
        del current_viewing[user_id]
    
    # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
    # if user_id in viewed_users:
    #     del viewed_users[user_id]
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "**üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π:**\n"
            "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n"
            "**üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:**\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "**üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π:**\n"
            "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n"
            "**üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:**\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    await callback.answer()


@dp.callback_query(F.data == "search_by_keywords")
async def start_search_by_keywords(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_profile_exists(user_id):
        await callback.message.edit_text(
            "‚ùå **–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!**\n\n"
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
            ])
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üîé **–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ:\n"
        "‚Ä¢ –ò–º–µ–Ω–∏\n"
        "‚Ä¢ –§–∏–ª–∏–∞–ª—É\n"
        "‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–∞–º\n\n"
        "üí° **–ü—Ä–∏–º–µ—Ä—ã:**\n"
        "‚Ä¢ '–ê–Ω–Ω–∞ IT' - –Ω–∞–π–¥–µ—Ç –ê–Ω–Ω—É –∏–∑ IT\n"
        "‚Ä¢ '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä' - –Ω–∞–π–¥–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É\n"
        "‚Ä¢ '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç Python' - –Ω–∞–π–¥–µ—Ç Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n"
        "‚Ä¢ '–¥–∏–∑–∞–π–Ω —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ' - –Ω–∞–π–¥–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
    )
    await state.set_state(SearchStates.waiting_for_keywords)
    await callback.answer()




@dp.message(StateFilter(SearchStates.waiting_for_keywords))
async def process_keywords_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    keywords = message.text.strip()
    
    if len(keywords) < 2:
        await message.answer(
            "‚ùå **–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
        )
        return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    search_results = await db.search_users_by_keywords(keywords, message.from_user.id)
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º '{keywords}': –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    if not search_results:
        await message.answer(
            f"üòî **–ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º '{keywords}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –î—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "‚Ä¢ –ë–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
            "‚Ä¢ –ú–µ–Ω—å—à–µ —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_by_keywords")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    if len(search_results) == 1:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É
        user_data = search_results[0]
        current_viewing[message.from_user.id] = user_data
        await show_profile_card(message, user_data)
        await state.clear()
    else:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        text = f"üîé **–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keywords}':**\n\n"
        
        for i, user in enumerate(search_results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            text += f"{i}. **{user['name']}**\n"
            if user.get('branch'):
                text += f"   üè¢ {user['branch']}"
            if user.get('job_title'):
                text += f" | üíº {user['job_title']}"
            text += "\n\n"
        
        if len(search_results) > 10:
            text += f"... –∏ –µ—â–µ {len(search_results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        
        text += "üí° **–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫**"
        
        await message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –£—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="search_by_keywords")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear()


@dp.callback_query(F.data.startswith("respond_like_"))
async def respond_to_like(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–∞–π–∫ - –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è"""
    try:
        user_id = callback.from_user.id
        from_user_id = int(callback.data.split("_")[2])
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª–∞–π–∫ –æ—Ç {from_user_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç
        await db.add_like(user_id, from_user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ø–µ—Ä—å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        is_match = await db.check_match(user_id, from_user_id)
        
        if is_match:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            contact_info = await db.get_user_contact_info(from_user_id)
            
            try:
                await callback.message.edit_text(
                    f"üéâ **–í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!**\n\n"
                    f"–í—ã –∏ {contact_info['name']} —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
                    f"üí¨ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n"
                    f"{format_contact_info(contact_info, from_user_id)}\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –æ–±—â–∞—Ç—å—Å—è!",
                    reply_markup=get_contact_keyboard(from_user_id)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await callback.message.answer(
                    f"üéâ **–í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!**\n\n"
                    f"–í—ã –∏ {contact_info['name']} —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
                    f"üí¨ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n"
                    f"{format_contact_info(contact_info, from_user_id)}\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –æ–±—â–∞—Ç—å—Å—è!",
                    reply_markup=get_contact_keyboard(from_user_id)
                )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            if from_user_id != user_id and from_user_id > 100000000 and from_user_id not in [123456789, 4001, 5001, 6001, 7001, 8001]:
                other_contact_info = await db.get_user_contact_info(user_id)
                try:
                    await bot.send_message(
                        from_user_id,
                        f"üéâ **–í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!**\n\n"
                        f"–í—ã –∏ {other_contact_info['name']} —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
                        f"üí¨ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n"
                        f"{format_contact_info(other_contact_info, user_id)}\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –æ–±—â–∞—Ç—å—Å—è!",
                        reply_markup=get_contact_keyboard(user_id)
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {from_user_id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {from_user_id}: {e}")
        else:
            try:
                await callback.message.edit_text(
                    f"‚úÖ **–ò–Ω—Ç–µ—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
                    f"–í—ã –≤—ã—Ä–∞–∑–∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n\n"
                    f"–ï—Å–ª–∏ –æ–Ω —Ç–æ–∂–µ –∑–∞—Ö–æ—á–µ—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –µ—â–µ", callback_data="search")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await callback.message.answer(
                    f"‚úÖ **–ò–Ω—Ç–µ—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
                    f"–í—ã –≤—ã—Ä–∞–∑–∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n\n"
                    f"–ï—Å–ª–∏ –æ–Ω —Ç–æ–∂–µ –∑–∞—Ö–æ—á–µ—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –µ—â–µ", callback_data="search")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ respond_to_like: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data.startswith("skip_like_"))
async def skip_like(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ª–∞–π–∫–∞"""
    from_user_id = int(callback.data.split("_")[2])
    
    await callback.message.edit_text(
        f"‚û°Ô∏è **–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω**\n\n"
        f"–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    
    await callback.answer()

@dp.callback_query(F.data == "viewed_list")
async def show_viewed_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_profile_exists(user_id):
        await callback.message.edit_text(
            "‚ùå **–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!**\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
            ])
        )
        await callback.answer()
        return
    
    user_viewed = viewed_users.get(user_id, [])
    logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è {user_id}: {user_viewed}")
    
    if not user_viewed:
        await callback.message.edit_text(
            "üëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏**\n\n"
            "–í—ã –µ—â–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    viewed_users_info = await db.get_users_by_ids(user_viewed)
    
    if not viewed_users_info:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö.")
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text = f"üëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏** ({len(viewed_users_info)}):\n\n"
    
    for i, user in enumerate(viewed_users_info, 1):
        text += f"{i}. **{user['name']}**\n"
        if user.get('branch'):
            text += f"   üè¢ {user['branch']}"
        if user.get('job_title'):
            text += f" | üíº {user['job_title']}"
        text += "\n"
        if user.get('about'):
            text += f"   üìù {user['about'][:50]}...\n"
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_viewed")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(F.data == "clear_viewed")
async def clear_viewed_list(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    if user_id in viewed_users:
        del viewed_users[user_id]
    
    await callback.message.edit_text(
        "‚úÖ **–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –æ—á–∏—â–µ–Ω!**\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data == "my_profile")
async def show_my_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    user = get_cached_user(user_id)
    if not user:
        user = await db.get_user(user_id)
        if user:
            set_cached_user(user_id, user)
    
    if not user:
        await callback.message.edit_text(
            "‚ùå **–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    text = f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
    text += f"**–ò–º—è:** {user['name']}\n"
    if user.get('branch'):
        text += f"**–§–∏–ª–∏–∞–ª:** {user['branch']}\n"
    if user.get('job_title'):
        text += f"**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {user['job_title']}\n"
    if user.get('about'):
        text += f"**–û —Å–µ–±–µ:** {user['about']}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    try:
        if user.get('photo_file_id'):
            await callback.message.answer_photo(
                photo=user['photo_file_id'],
                caption=text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    
    await callback.answer()


@dp.callback_query(F.data == "edit_profile")
async def edit_profile(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
    try:
        await callback.message.edit_text(
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –ò–º—è", callback_data="edit_name")],
                [InlineKeyboardButton(text="üè¢ –§–∏–ª–∏–∞–ª", callback_data="edit_branch")],
                [InlineKeyboardButton(text="üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data="edit_job_title")],
                [InlineKeyboardButton(text="üìù –û —Å–µ–±–µ", callback_data="edit_about")],
                [InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="edit_photo")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –ò–º—è", callback_data="edit_name")],
                [InlineKeyboardButton(text="üè¢ –§–∏–ª–∏–∞–ª", callback_data="edit_branch")],
                [InlineKeyboardButton(text="üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data="edit_job_title")],
                [InlineKeyboardButton(text="üìù –û —Å–µ–±–µ", callback_data="edit_about")],
                [InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="edit_photo")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è
@dp.callback_query(F.data == "edit_name")
async def edit_name(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    user_data = await db.get_user(callback.from_user.id)
    if user_data:
        await state.update_data(
            name=user_data['name'],
            branch=user_data['branch'],
            job_title=user_data['job_title'],
            about=user_data['about'],
            photo_file_id=user_data.get('photo_file_id'),  # –í–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            is_edit=True
        )
    
    await state.set_state(ProfileStates.waiting_for_name)
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_profile")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "edit_branch")
async def edit_branch(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    user_data = await db.get_user(callback.from_user.id)
    if user_data:
        await state.update_data(
            name=user_data['name'],
            branch=user_data['branch'],
            job_title=user_data['job_title'],
            about=user_data['about'],
            photo_file_id=user_data.get('photo_file_id'),  # –í–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            is_edit=True
        )
    
    await state.set_state(ProfileStates.waiting_for_branch)
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_profile")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "edit_job_title")
async def edit_job_title(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    user_data = await db.get_user(callback.from_user.id)
    if user_data:
        await state.update_data(
            name=user_data['name'],
            branch=user_data['branch'],
            job_title=user_data['job_title'],
            about=user_data['about'],
            photo_file_id=user_data.get('photo_file_id'),  # –í–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            is_edit=True
        )
    
    await state.set_state(ProfileStates.waiting_for_job_title)
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_profile")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "edit_about")
async def edit_about(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    user_data = await db.get_user(callback.from_user.id)
    if user_data:
        await state.update_data(
            name=user_data['name'],
            branch=user_data['branch'],
            job_title=user_data['job_title'],
            about=user_data['about'],
            photo_file_id=user_data.get('photo_file_id'),  # –í–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            is_edit=True
        )
    
    await state.set_state(ProfileStates.waiting_for_about)
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ**\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ —Ü–µ–ª—è—Ö:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_profile")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "edit_photo")
async def edit_photo(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    user_data = await db.get_user(callback.from_user.id)
    if user_data:
        await state.update_data(
            name=user_data['name'],
            branch=user_data['branch'],
            job_title=user_data['job_title'],
            about=user_data['about'],
            photo_file_id=user_data.get('photo_file_id'),  # –í–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
            is_edit=True
        )
    
    await state.set_state(ProfileStates.waiting_for_photo)
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_profile")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "separator")
async def separator_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –≤ –º–µ–Ω—é"""
    await callback.answer()

@dp.callback_query(F.data == "reset_profile")
async def reset_profile(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è **–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?**\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query(F.data == "statistics")
async def show_statistics(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_profile_exists(user_id):
        await callback.message.edit_text(
            "‚ùå **–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!**\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = await db.get_users_count()
    viewed_count = len(viewed_users.get(user_id, []))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db.get_user(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    text = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    text += f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n"
    text += f"‚Ä¢ –ò–º—è: {user['name']}\n"
    text += f"‚Ä¢ –§–∏–ª–∏–∞–ª: {user.get('branch', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.get('job_title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    
    text += f"üîç **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
    text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {viewed_count}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_users}\n\n"
    
    if viewed_count > 0:
        text += f"üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å:**\n"
        progress_percent = min(100, (viewed_count / max(1, total_users - 1)) * 100)
        text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {progress_percent:.1f}% –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
        
        if progress_percent >= 100:
            text += f"‚Ä¢ üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n"
        elif progress_percent >= 50:
            text += f"‚Ä¢ üöÄ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!\n"
        elif progress_percent >= 25:
            text += f"‚Ä¢ üëç –•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç!\n"
        else:
            text += f"‚Ä¢ üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n"
    
    text += f"\nüí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª—é–¥–µ–π!"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "confirm_reset")
async def confirm_reset(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    success = await db.delete_user(callback.from_user.id)
    
    if success:
        await callback.message.edit_text(
            "‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
            ])
        )
    else:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    
    await callback.answer()


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@dp.message(Command("reset"))
async def cmd_reset(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /reset"""
    success = await db.delete_user(message.from_user.id)
    
    if success:
        await message.answer(MESSAGES['profile_reset'])
        await message.answer("üìù –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(ProfileStates.waiting_for_name)
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–Ω–∫–µ—Ç—ã.")


@dp.message(Command("profile"))
async def cmd_profile(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer(MESSAGES['profile_not_found'])
        return
    
    text = f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
    text += f"–ò–º—è: {user['name']}\n"
    text += f"–§–∏–ª–∏–∞–ª: {user['branch']}\n"
    text += f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user['job_title']}\n"
    text += f"–û —Å–µ–±–µ: {user['about']}"
    
    if user.get('photo_file_id'):
        await message.answer_photo(
            photo=user['photo_file_id'],
            caption=text,
            parse_mode="Markdown"
        )
    else:
        await message.answer(text, parse_mode="Markdown")


@dp.message()
async def handle_unknown_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    current_state = await state.get_state()
    if current_state in [ProfileStates.waiting_for_name, ProfileStates.waiting_for_branch, 
                        ProfileStates.waiting_for_job_title, ProfileStates.waiting_for_about, 
                        ProfileStates.waiting_for_photo]:
        await message.answer(
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user = await db.get_user(message.from_user.id)
        if user:
            await message.answer(
                "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="create_profile")]
                ])
            )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global BOT_ID
    
    # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
    try:
        bot_info = await bot.get_me()
        BOT_ID = bot_info.id
        logger.info(f"ID –±–æ—Ç–∞: {BOT_ID}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –±–æ—Ç–∞: {e}")
        BOT_ID = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


async def send_like_notification_with_buttons(to_user_id: int, from_user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å - –Ω–µ –±–æ—Ç
        if BOT_ID and to_user_id == BOT_ID:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç—É (ID: {to_user_id})")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
        contact_info = await db.get_user_contact_info(from_user_id)
        
        if not contact_info:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {from_user_id}")
            return False
        
        await bot.send_message(
            to_user_id,
            f"üíñ **–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!**\n\n"
            f"üë§ {contact_info['name']} –≤—ã—Ä–∞–∑–∏–ª –∂–µ–ª–∞–Ω–∏–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∞–º–∏!\n\n"
            f"üè¢ **–§–∏–ª–∏–∞–ª:** {contact_info['branch']}\n"
            f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {contact_info['job_title']}\n"
            f"üÜî **ID –¥–ª—è —Å–≤—è–∑–∏:** `{from_user_id}`\n\n"
            f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_response_keyboard(from_user_id)
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user_id}")
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(main())

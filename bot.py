"""
Telegram –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN, MESSAGES
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


class ProfileStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    waiting_for_name = State()
    waiting_for_branch = State()
    waiting_for_job_title = State()
    waiting_for_about = State()
    waiting_for_photo = State()


class SearchStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    viewing_profile = State()


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
current_viewing = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
viewed_users = {}


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(message.from_user.id)
    
    if user:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
        await message.answer(MESSAGES['welcome'])
        await message.answer("üìù –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(ProfileStates.waiting_for_name)


@dp.message(StateFilter(ProfileStates.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(name=name)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∏–ª–∏–∞–ª/–æ—Ç–¥–µ–ª:")
    await state.set_state(ProfileStates.waiting_for_branch)


@dp.message(StateFilter(ProfileStates.waiting_for_branch))
async def process_branch(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∏–ª–∏–∞–ª–∞"""
    branch = message.text.strip()
    if len(branch) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(branch=branch)
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await state.set_state(ProfileStates.waiting_for_job_title)


@dp.message(StateFilter(ProfileStates.waiting_for_job_title))
async def process_job_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    job_title = message.text.strip()
    if len(job_title) < 2:
        await message.answer("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(job_title=job_title)
    await message.answer("üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ü–µ–ª—è—Ö (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç):")
    await state.set_state(ProfileStates.waiting_for_about)


@dp.message(StateFilter(ProfileStates.waiting_for_about))
async def process_about(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"""
    about = message.text.strip()
    if len(about) < 10:
        await message.answer("‚ùå –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(about=about)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")]
    ])
    
    await message.answer("üì∑ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∞–Ω–∫–µ—Ç–µ?", reply_markup=keyboard)
    await state.set_state(ProfileStates.waiting_for_photo)


@dp.callback_query(F.data == "add_photo")
async def process_add_photo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    await callback.message.edit_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:")
    await state.set_state(ProfileStates.waiting_for_photo)


@dp.callback_query(F.data == "skip_photo")
async def process_skip_photo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ"""
    await save_profile(callback.message, state, photo_file_id=None)
    await callback.answer()


@dp.message(StateFilter(ProfileStates.waiting_for_photo), F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    photo_file_id = message.photo[-1].file_id
    await save_profile(message, state, photo_file_id)


@dp.message(StateFilter(ProfileStates.waiting_for_photo))
async def process_photo_invalid(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")


async def save_profile(message: types.Message, state: FSMContext, photo_file_id: str = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    
    success = await db.add_user(
        telegram_id=message.from_user.id,
        name=data['name'],
        branch=data['branch'],
        job_title=data['job_title'],
        about=data['about'],
        photo_file_id=photo_file_id
    )
    
    if success:
        await state.clear()
        await message.answer(MESSAGES['profile_created'])
        await show_main_menu(message)
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ", callback_data="viewed_list")],
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="reset_profile")]
    ])
    return keyboard


async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())


@dp.callback_query(F.data == "search")
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users_count = await db.get_users_count()
    if users_count < 2:
        await callback.message.edit_text(MESSAGES['no_profiles'])
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_viewed = viewed_users.get(user_id, [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    random_user = await db.get_random_user(user_id, user_viewed)
    if not random_user:
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        viewed_users[user_id] = []
        await callback.message.edit_text("üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    viewed_users[user_id] = user_viewed + [random_user['telegram_id']]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_viewing[user_id] = random_user
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    await show_profile_card(callback.message, random_user)
    await callback.answer()


def get_profile_card_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ù –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="like")],
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="next")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


async def show_profile_card(message: types.Message, user_data: dict):
    """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    text = f"üë§ **{user_data['name']}**\n"
    text += f"üè¢ –§–∏–ª–∏–∞–ª: {user_data['branch']}\n"
    text += f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data['job_title']}\n"
    text += f"üìù –û —Å–µ–±–µ: {user_data['about']}"
    
    if user_data.get('photo_file_id'):
        await message.answer_photo(
            photo=user_data['photo_file_id'],
            caption=text,
            parse_mode="Markdown",
            reply_markup=get_profile_card_keyboard()
        )
    else:
        await message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=get_profile_card_keyboard()
        )


@dp.callback_query(F.data == "like")
async def process_like(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞"""
    user_id = callback.from_user.id
    viewed_user = current_viewing.get(user_id)
    
    if not viewed_user:
        await callback.message.edit_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        await callback.answer()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
    await db.add_like(user_id, viewed_user['telegram_id'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    is_match = await db.check_match(user_id, viewed_user['telegram_id'])
    
    if is_match:
        # –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        username = await db.get_user_username(viewed_user['telegram_id'])
        await callback.message.edit_text(f"üéâ {MESSAGES['match_found'].format(username)}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
        other_username = await db.get_user_username(user_id)
        try:
            await bot.send_message(
                viewed_user['telegram_id'],
                f"üéâ {MESSAGES['match_found'].format(other_username)}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    else:
        await callback.message.edit_text(MESSAGES['like_sent'])
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if user_id in current_viewing:
        del current_viewing[user_id]
    
    await callback.answer()


@dp.callback_query(F.data == "next")
async def process_next(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—å—à–µ'"""
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if user_id in current_viewing:
        del current_viewing[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_viewed = viewed_users.get(user_id, [])
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    random_user = await db.get_random_user(user_id, user_viewed)
    if not random_user:
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        viewed_users[user_id] = []
        await callback.message.edit_text("üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    viewed_users[user_id] = user_viewed + [random_user['telegram_id']]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_viewing[user_id] = random_user
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    await show_profile_card(callback.message, random_user)
    await callback.answer()


@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    if user_id in current_viewing:
        del current_viewing[user_id]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    if user_id in viewed_users:
        del viewed_users[user_id]
    
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())
    await callback.answer()


@dp.callback_query(F.data == "viewed_list")
async def show_viewed_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    user_viewed = viewed_users.get(user_id, [])
    
    if not user_viewed:
        await callback.message.edit_text(
            "üëÄ –í—ã –µ—â–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏.\n\n–ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    viewed_users_info = await db.get_users_by_ids(user_viewed)
    
    if not viewed_users_info:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö.")
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text = f"üëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** ({len(viewed_users_info)}):\n\n"
    
    for i, user in enumerate(viewed_users_info, 1):
        text += f"{i}. **{user['name']}**\n"
        text += f"   üè¢ {user['branch']} | üíº {user['job_title']}\n"
        text += f"   üìù {user['about'][:50]}...\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_viewed")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(F.data == "clear_viewed")
async def clear_viewed_list(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    if user_id in viewed_users:
        del viewed_users[user_id]
    
    await callback.message.edit_text(
        "‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", callback_data="search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data == "my_profile")
async def show_my_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.message.edit_text(MESSAGES['profile_not_found'])
        await callback.answer()
        return
    
    text = f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
    text += f"–ò–º—è: {user['name']}\n"
    text += f"–§–∏–ª–∏–∞–ª: {user['branch']}\n"
    text += f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user['job_title']}\n"
    text += f"–û —Å–µ–±–µ: {user['about']}"
    
    if user.get('photo_file_id'):
        await callback.message.answer_photo(
            photo=user['photo_file_id'],
            caption=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    else:
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    
    await callback.answer()


@dp.callback_query(F.data == "reset_profile")
async def reset_profile(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query(F.data == "confirm_reset")
async def confirm_reset(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    success = await db.delete_user(callback.from_user.id)
    
    if success:
        await callback.message.edit_text(MESSAGES['profile_reset'])
        await asyncio.sleep(2)
        await callback.message.edit_text(MESSAGES['welcome'])
        await callback.message.answer("üìù –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(ProfileStates.waiting_for_name)
    else:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–Ω–∫–µ—Ç—ã.")
    
    await callback.answer()


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@dp.message(Command("reset"))
async def cmd_reset(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /reset"""
    success = await db.delete_user(message.from_user.id)
    
    if success:
        await message.answer(MESSAGES['profile_reset'])
        await message.answer("üìù –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(ProfileStates.waiting_for_name)
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–Ω–∫–µ—Ç—ã.")


@dp.message(Command("profile"))
async def cmd_profile(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer(MESSAGES['profile_not_found'])
        return
    
    text = f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
    text += f"–ò–º—è: {user['name']}\n"
    text += f"–§–∏–ª–∏–∞–ª: {user['branch']}\n"
    text += f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user['job_title']}\n"
    text += f"–û —Å–µ–±–µ: {user['about']}"
    
    if user.get('photo_file_id'):
        await message.answer_photo(
            photo=user['photo_file_id'],
            caption=text,
            parse_mode="Markdown"
        )
    else:
        await message.answer(text, parse_mode="Markdown")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
